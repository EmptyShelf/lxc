#!/bin/bash

[[ $EUID -eq 0 ]] && exit 1

LXC_LIB=".lxc-lib"

# required tools
LIST_UTILS="
getopt
loginctl
lxc-attach
lxc-config
lxc-create
lxc-info
lxc-start
rsync
"

# check for required tools
for ITEM in `echo "${LIST_UTILS}"`; do
    [ -z "`which ${ITEM}`" ] && echo "ERROR: Required utility is not installed (${ITEM})" >&2 && exit 1
done

# set core constants
USER_HOME=/home/${USER}
# ~/.config/lxc/default.conf
LXC_DEFAULT_CONFIG=`lxc-config lxc.default_config`
LXC_DEFAULT_CONFIG_PATH=`dirname ${LXC_DEFAULT_CONFIG}`
# ~/.local/share/lxc
LXC_LXCPATH=`lxc-config lxc.lxcpath`
LXC_DOWNLOAD=/usr/share/lxc/templates/lxc-download

if [ ! -e ${LXC_DEFAULT_CONFIG} ]; then
    [ -e /etc/pacman.conf ] && echo "ERROR: No configuration (run: ./installation/unprivileged-archlinux)" >&2 && exit 1
    [ -e /etc/apt/sources.list ] && echo "ERROR: No configuration (run: ./installation/unprivileged-ubuntu)" >&2 && exit 1
fi

function usage { # RET STR
    RET=${1}
    STR="${2}"
    [ -z "${STR}" ] && echo "SYSTEM ERROR: L41 ${LXC_LIB}" >&2 && exit 1
    echo -n -e "${STR}"
    exit ${RET}
}

# returns: Operating System Name
function os_name() # NAME
{
    NAME="${1}"
    echo "`cat ${LXC_LXCPATH}/${NAME}/rootfs/etc/issue | grep '^[^ ]\+' | sed 's|^\([^\\0-9]\+\).*|\1|g' | sed 's| *$||'`"
}

function upgrade_arch() # NAME
{
    NAME="${1}"
    lxc-attach -n  ${NAME} -- pacman -Suy --noconfirm || exit 1
}

function upgrade_ubuntu() # NAME
{
    NAME="${1}"
    lxc-attach -n ${NAME} -- apt update || exit 1
    lxc-attach -n ${NAME} -- apt -y upgrade || exit 1
    lxc-attach -n ${NAME} -- apt -y autoremove || exit 1
}

function upgrade_os() # NAME
{
    NAME="${1}"
    [ -z "${NAME}" ] && echo "SYSTEM ERROR: L70 ${LXC_LIB}" >&2 && exit 1

    OS_NAME="`os_name ${NAME}`"
    echo
    echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * *"
    echo "* Container: ${NAME}; OS: ${OS_NAME}"
    echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * *"
    echo
    case "${OS_NAME}" in
        Arch*)
            upgrade_arch ${NAME}
            ;;
        Ubuntu*)
            upgrade_ubuntu ${NAME}
            ;;
        *)
            echo "ERROR: Unsupported OS name (${OS_NAME})" >&2 && exit 1
            ;;
    esac
}

function package_arch() # NAME PACKAGE
{
    NAME="${1}"
    PACKAGE="${2}"
    [ -z "${NAME}" -o -z "${PACKAGE}" ] && echo "SYSTEM ERROR: L95 ${LXC_LIB}" >&2 && exit 1
    lxc-attach -n ${NAME} -- su - -c "pacman -Q ${PACKAGE} || pacman --noconfirm -S ${PACKAGE}" || exit 1
}

function package_ubuntu() # NAME PACKAGE
{
    NAME="${1}"
    PACKAGE="${2}"
    [ -z "${NAME}" -o -z "${PACKAGE}" ] && echo "SYSTEM ERROR: L103 ${LXC_LIB}" >&2 && exit 1
    lxc-attach -n ${NAME} -- apt -y install ${PACKAGE} || exit 1
}

function package_install() # NAME PACKAGE
{
    NAME="${1}"
    PACKAGE="${2}"
    [ -z "${NAME}" -o -z "${PACKAGE}" ] && echo "SYSTEM ERROR: L111 ${LXC_LIB}" >&2 && exit 1

    OS_NAME="`os_name ${NAME}`"
    case "${OS_NAME}" in
        Arch*)
            package_arch ${NAME} ${PACKAGE}
            ;;
        Ubuntu*)
            package_ubuntu ${NAME} ${PACKAGE}
            ;;
        *)
            echo "ERROR: Unsupported OS name (${OS_NAME})" >&2 && exit 1
            ;;
    esac
}

function host_addr() # NAME
{
    NAME="${1}"
    [ -z "${NAME}" ] && echo "SYSTEM ERROR: L130 ${LXC_LIB}" >&2 && exit 1
    echo "`lxc-attach -n ${NAME} -- ip -4 a show eth0 | grep -Po 'inet \K[0-9.]*'`"
}

function network_up() # NAME
{
    NAME="${1}"
    [ -z "${NAME}" ] && echo "SYSTEM ERROR: L137 ${LXC_LIB}" >&2 && exit 1

    BOOTING=
    while :; do
        if [ -z "`host_addr ${NAME}`" ]; then
            if [ -z "${BOOTING}" ]; then
                BOOTING="Booting ${NAME}"
                echo -n "${BOOTING}"
            fi
            echo -n "."
            sleep 1
            continue
        fi
        [ -z "${BOOTING}" ] || echo ""
        break
    done
}

function container_start() # NAME [NODELAY]
{
    NAME="${1}"
    NODELAY="${2}"
    [ -z "${NAME}" ] && echo "SYSTEM ERROR: L159 ${LXC_LIB}" >&2 && exit 1

    case "`lxc-info -s -n ${NAME}`" in
        *RUNNING)
            ;;
        *STOPPED)
            lxc-start -n ${NAME}
            ;;
        *FROZEN)
            lxc-unfreeze -n ${NAME}
            ;;
        *)
            echo "ERROR: Unable to start container (${NAME})" >&2 && exit 1
            ;;
    esac

    [ -n "${NODELAY}" ] || network_up ${NAME}
}

function container_stop() # NAME
{
    NAME="${1}"
    [ -z "${NAME}" ] && echo "SYSTEM ERROR: L181 ${LXC_LIB}" >&2 && exit 1

    case "`lxc-info -s -n ${NAME}`" in
        *RUNNING)
            lxc-stop -n ${NAME}
            ;;
        *STOPPED)
            ;;
        *FROZEN)
            lxc-unfreeze -n ${NAME}
            lxc-stop -n ${NAME}
            ;;
        *)
            echo "ERROR: Unable to start container (${NAME})" >&2 && exit 1
            ;;
    esac
}

function lxc_status()
{
    for ITEM in `lxc-config -l`; do echo -n "${ITEM}: "; lxc-config ${ITEM}; done

    UNPRIVILEGED="disabled"
    [ -n "`cat /etc/lxc/lxc-usernet | grep ${USER}`" ] && UNPRIVILEGED="enabled"
    echo "Unprivileged: ${UNPRIVILEGED}"

    ACTIVE="active"
    [ -n "`systemctl --user status lxc-autostart 2>/dev/null | grep 'inactive'`" ] && ACTIVE="not active"
    echo "Autostart: ${ACTIVE}"

    for ITEM in `loginctl --no-legend list-users | sed 's|^[0-9]\+ ||'`; do
        LINGER="no linger"
        loginctl show-user ${ITEM} --property=Linger 2>/dev/null | grep -q 'yes' && LINGER="linger"
        echo "${ITEM}: ${LINGER}"
    done

    exit 0
}

function ssh_host_add()
{
    NAME="${1}"
    USERNAME="${2}"
    [ -z "${NAME}" -o -z "${USERNAME}" ] && echo "SYSTEM ERROR: L224 ${LXC_LIB}" >&2 && exit 1
    # adds 5 lines
    cat <<EOF | tee -a ${USER_HOME}/.ssh/config >/dev/null
Host ${NAME}
    HostName `host_addr ${NAME}`
    User ${USERNAME}
    IdentityFile ${USER_HOME}/.ssh/id_rsa

EOF
}

function ssh_host_remove()
{
    NAME="${1}"
    if [ -n "`cat ${USER_HOME}/.ssh/config | grep \"^Host \+${NAME}$\"`" ]; then
        # removes 5 (+4d) lines
        sed -e "/^Host \+${NAME}$/,+4d" -i ${USER_HOME}/.ssh/config
    fi
}

#        8
#ubuntu
#          10
#archlinux
#            12
#amazonlinux
#                16
#springdalelinux
COLUMN0=10
COLUMN_=8
function template_list()
{
    ARG1="${1}"
    [ ! -e ${LXC_DOWNLOAD} ] && echo "ERROR: Unable to find utility (lxc-download)" >&2 && exit 1
    if [ "${ARG1}" = "all" ]; then
        ${LXC_DOWNLOAD} -l
    else
        echo -e -n "Searching...\r"
        count=0
        for ITEM in `${LXC_DOWNLOAD} -l | grep -i -e ubuntu -e archlinux -e RELEASE`; do
            if [ $count -eq 0 ]; then
                printf "%-${COLUMN0}s " "${ITEM}"
            else
                printf "%-${COLUMN_}s " "${ITEM}"
            fi

            if [ $count -ge 4 ]; then
                echo ""
                count=0
            else
                ((count=count+1))
            fi
        done
    fi
    exit 0
}

